{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitya\\\\constructor-comp-www\\\\src\\\\apartmentShowcase\\\\apartmentShowcaseMain.tsx\";\nimport axios from 'axios';\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { actions } from '../actions and const/actions';\nimport Showcase from './Showcase';\nimport { asyncActions } from '../actions and const/asyncActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst pictures = importAll(require.context(`../picturesForApartments/picturesForApartment1`, false, /\\.(png|jpe?g|svg)$/));\n\nclass ApartmentShowcase extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.takeResponseAboutApartments = (apartments, pictures) => {\n      return apartments.map((apartment, indexApartment) => {\n        let preparationApartmentToExport = pictures => {\n          let indexApartmentPlusOne = indexApartment + 1;\n          let RegExpForSelectedApartment = new RegExp(indexApartmentPlusOne + `_\\\\D`);\n          const selectPicturesForApartmentRegExp = pictures.map(item => item.default.match(RegExpForSelectedApartment)).filter(item => item != null);\n          const picturesWithId = [];\n          const namesRoomsArr = [];\n          const rooms = apartment.rooms; //add all roomNames\n\n          rooms.map(room => {\n            namesRoomsArr.push(room.name);\n          });\n          const pictureHouseItselfRegExp = new RegExp(`\\d*\\D*houseItself`, `gm`);\n          const namesRoomsArrWithRegExp = namesRoomsArr.map(name => new RegExp(`\\d*\\D*${name}`, `gm`)); //add images to id\n\n          let id = 0;\n          selectPicturesForApartmentRegExp.forEach(oldPicture => {\n            ++id;\n            let picture = oldPicture.input;\n            let pictureWithId = {\n              picture,\n              id\n            };\n            picturesWithId.push(pictureWithId);\n          });\n\n          const addImagesForHouseItself = () => {\n            picturesWithId.filter(pictureWithId => {\n              if (pictureWithId.picture.match(pictureHouseItselfRegExp)) {\n                if (!!pictureWithId) {\n                  apartment.picturesHouseItself.push(pictureWithId);\n                }\n              }\n            });\n          };\n\n          addImagesForHouseItself();\n\n          const addImagesForApartments = (room, regExpArr) => {\n            const regExpSelectedRoom = uncertainRegExp => {\n              let filtredRegExp = uncertainRegExp.find(regExp => {\n                if (!!room.name.match(regExp)) {\n                  return regExp;\n                }\n              });\n\n              let returnRegExp = filtredRegExp => {\n                let arr1 = [];\n\n                if (filtredRegExp != undefined) {\n                  let RegExpToReturn = Object.assign(filtredRegExp);\n                  arr1.push(RegExpToReturn);\n                  return RegExpToReturn;\n                }\n\n                return arr1[0];\n              };\n\n              return returnRegExp(filtredRegExp);\n            }; //add Images to ArrayImages\n\n\n            picturesWithId.map(pictureWithId => {\n              if (pictureWithId.picture.match(regExpSelectedRoom(regExpArr)) != null) {\n                room.pictures.push(pictureWithId);\n              }\n            });\n          }; //add images to apartment\n\n\n          rooms.forEach(room => {\n            addImagesForApartments(room, namesRoomsArrWithRegExp);\n          });\n        };\n\n        preparationApartmentToExport(pictures);\n        return apartment;\n      });\n    };\n\n    this.isIntWork = true;\n\n    this.changePictureHouseItself = () => {\n      const selectedApartment = this.props.apartments[this.props.indexOfSelectedApartment];\n      const picturesHouseItselfLength = selectedApartment.picturesHouseItself.length;\n      clearInterval(this.props.intervalIdForPicture);\n      clearInterval(this.props.intervalIdPictureHouseItself);\n      let newPosition = this.props.positionPictureHouseItself;\n\n      if (this.props.indexOfSelectedRoom != null) {\n        this.props.setPositionPictureHouseItself(0);\n      }\n\n      const int = setInterval(() => {\n        this.props.setIntervalIdPictureHouseItself(int);\n        this.props.setPositionPictureHouseItself(0);\n        newPosition++;\n\n        if (picturesHouseItselfLength - 1 < newPosition) {\n          newPosition = 0;\n          this.props.setPositionPictureHouseItself(0);\n        } else {\n          this.props.setPositionPictureHouseItself(newPosition);\n        }\n\n        this.props.setPositionPictureHouseItself(newPosition);\n      }, 5000);\n      this.props.setIntervalIdPictureHouseItself(int);\n    };\n\n    this.leaveFromFrame = () => {\n      this.props.setIndexOfSelectedRoom(null);\n      this.changePictureHouseItself();\n    };\n\n    this.chengeIndexOfSelectedApartment = addOne => {\n      if (this.props.indexOfSelectedApartment == 0) {\n        this.props.setIndexOfSelectedApartment(this.props.apartments.length - 1);\n      } else if (this.props.indexOfSelectedApartment == this.props.apartments.length - 1) {\n        this.props.setIndexOfSelectedApartment(0);\n      } else if (addOne == true) {\n        this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment + 1);\n      } else if (addOne == false) {\n        this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment - 1);\n      }\n    };\n\n    this.handleUpButton = () => {\n      window.scrollTo(0, 1000);\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://my-json-server.typicode.com/GreenScreenRabbit/constructor-comp-server/apartments').then(response => this.props.setApartmentsFromState(this.takeResponseAboutApartments(response.data, pictures))).then(response => this.changePictureHouseItself());\n  }\n\n  render() {\n    const renderImages = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"apartmentShowcase-overview\",\n        onMouseLeave: () => this.props.setIntervalForPicture(false),\n        children: this.props.apartments.map((apartment, index) => {\n          if (index == this.props.indexOfSelectedApartment) {\n            if (this.props.indexOfSelectedRoom != null) {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: apartment.rooms[this.props.indexOfSelectedRoom].pictures[this.props.positionOfPicture].picture,\n                  className: \"apartmentShowcase-overview-image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"img\", {\n                src: apartment.picturesHouseItself[this.props.positionPictureHouseItself].picture,\n                className: \"apartmentShowcase-overview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 37\n              }, this);\n            }\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this);\n    };\n\n    const renderUpbar = () => {\n      if (this.props.apartments[this.props.indexOfSelectedApartment] != undefined) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"apartmentShowcase-wallpaper\",\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              onMouseLeave: () => this.leaveFromFrame(),\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                lg: {\n                  span: 8,\n                  offset: 0,\n                  order: 2\n                },\n                md: {\n                  span: 8,\n                  offset: 0,\n                  order: 2\n                },\n                sm: {\n                  span: 8,\n                  offset: 0,\n                  order: 2\n                },\n                className: \"colWithoutPadding\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"apartmentShowcase-frame\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"apartmentShowcase-upBar\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"apartmentShow ase-upBar-apartmentName\",\n                      children: this.props.apartments[this.props.indexOfSelectedApartment].name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 304,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"apartmentShowcase-upBar-button-back\",\n                      onClick: () => this.chengeIndexOfSelectedApartment(false),\n                      children: \"BACK\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 307,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"apartmentShowcase-upBar-button-next\",\n                      onClick: () => this.chengeIndexOfSelectedApartment(true),\n                      children: \"NEXT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 41\n                  }, this), renderImages()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Showcase, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 25\n          }, this)\n        }, void 0, false);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"apartmentShowcase-body\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          lg: {\n            span: 10,\n            offset: 1\n          },\n          md: {\n            span: 10,\n            offset: 1\n          },\n          sm: {\n            span: 10,\n            offset: 1\n          },\n          children: renderUpbar()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment,\n  indexOfSelectedRoom: state.showcaseStylesAndIndex.indexOfSelectedRoom,\n  showCaseApartment: state.apartmentShowCase.showCaseApartment,\n  apartments: state.apartmentsArray.apartments,\n  isIntervalForPictureWorking: state.showcaseStylesAndIndex.isIntervalForPictureWorking,\n  positionOfPicture: state.showcaseStylesAndIndex.positionOfPicture,\n  intervalIdPictureHouseItself: state.showcaseStylesAndIndex.intervalIdPictureHouseItself,\n  positionPictureHouseItself: state.showcaseStylesAndIndex.positionPictureHouseItself,\n  intervalIdForPicture: state.showcaseStylesAndIndex.intervalIdForPicture\n});\n\nexport default connect(mapStateToProps, {\n  setIndexOfSelectedApartment: actions.setIndexOfSelectedApartment,\n  setApartmentsFromState: actions.setApartmentsFromState,\n  setIndexOfSelectedRoom: actions.setIndexOfSelectedRoom,\n  changePositionPictureOfRoom: asyncActions.changePositionPictureOfRoom,\n  setIntervalForPicture: actions.setIntervalForPicture,\n  setIntervalIdPictureHouseItself: actions.setIntervalIdPictureHouseItself,\n  setPositionPictureHouseItself: actions.setPositionPictureHouseItself\n})(ApartmentShowcase);","map":{"version":3,"sources":["C:/Users/Vitya/constructor-comp-www/src/apartmentShowcase/apartmentShowcaseMain.tsx"],"names":["axios","React","Row","Col","connect","actions","Showcase","asyncActions","importAll","r","keys","map","pictures","require","context","ApartmentShowcase","Component","takeResponseAboutApartments","apartments","apartment","indexApartment","preparationApartmentToExport","indexApartmentPlusOne","RegExpForSelectedApartment","RegExp","selectPicturesForApartmentRegExp","item","default","match","filter","picturesWithId","namesRoomsArr","rooms","room","push","name","pictureHouseItselfRegExp","namesRoomsArrWithRegExp","id","forEach","oldPicture","picture","input","pictureWithId","addImagesForHouseItself","picturesHouseItself","addImagesForApartments","regExpArr","regExpSelectedRoom","uncertainRegExp","filtredRegExp","find","regExp","returnRegExp","arr1","undefined","RegExpToReturn","Object","assign","isIntWork","changePictureHouseItself","selectedApartment","props","indexOfSelectedApartment","picturesHouseItselfLength","length","clearInterval","intervalIdForPicture","intervalIdPictureHouseItself","newPosition","positionPictureHouseItself","indexOfSelectedRoom","setPositionPictureHouseItself","int","setInterval","setIntervalIdPictureHouseItself","leaveFromFrame","setIndexOfSelectedRoom","chengeIndexOfSelectedApartment","addOne","setIndexOfSelectedApartment","handleUpButton","window","scrollTo","componentDidMount","get","then","response","setApartmentsFromState","data","render","renderImages","setIntervalForPicture","index","positionOfPicture","renderUpbar","span","offset","order","mapStateToProps","state","apartmentsArray","showcaseStylesAndIndex","showCaseApartment","apartmentShowCase","isIntervalForPictureWorking","changePositionPictureOfRoom"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { Component, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { connect, RootStateOrAny } from 'react-redux';\r\nimport { actions } from '../actions and const/actions';\r\nimport Showcase from './Showcase';\r\nimport img from '../picturesForApartment1/bathroom_1.jpg';\r\nimport { asyncActions } from '../actions and const/asyncActions';\r\nimport { apartmentsType, apartmentType, roomType } from '../apartmentsType/apartmentsType';\r\nimport { oldPictureType, picturesType, picturesWithIdType, pictureType, pictureWithIdType, } from './apartmentShowcaseMainType';\r\n\r\nfunction importAll(r: any) {\r\n    return r.keys().map(r);\r\n}\r\n\r\nconst pictures: picturesType = importAll(require.context(`../picturesForApartments/picturesForApartment1`, false, /\\.(png|jpe?g|svg)$/));\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ApartmentShowcase extends React.Component<any, any> {\r\n    componentDidMount() {\r\n\r\n        axios\r\n            .get('https://my-json-server.typicode.com/GreenScreenRabbit/constructor-comp-server/apartments')\r\n            .then((response) => this.props.setApartmentsFromState(this.takeResponseAboutApartments(response.data, pictures)))\r\n            .then((response) => this.changePictureHouseItself())\r\n    }\r\n\r\n\r\n    takeResponseAboutApartments = (apartments: apartmentsType, pictures: picturesType) => {\r\n\r\n\r\n\r\n        return apartments.map((apartment: apartmentType, indexApartment: number) => {\r\n\r\n            let preparationApartmentToExport = (pictures: picturesType) => {\r\n\r\n\r\n\r\n                let indexApartmentPlusOne: any = indexApartment + 1\r\n\r\n                let RegExpForSelectedApartment = new RegExp(indexApartmentPlusOne + `_\\\\D`)\r\n\r\n\r\n                const selectPicturesForApartmentRegExp: any = pictures.map((item: any) => item.default.match(RegExpForSelectedApartment)).filter((item: any) => item != null)\r\n\r\n\r\n\r\n\r\n\r\n                const picturesWithId: picturesWithIdType = [];\r\n                const namesRoomsArr: string[] = [];\r\n                const rooms = apartment.rooms;\r\n\r\n                //add all roomNames\r\n                rooms.map((room: roomType) => {\r\n                    namesRoomsArr.push(room.name);\r\n                });\r\n\r\n\r\n\r\n\r\n\r\n                const pictureHouseItselfRegExp: RegExp = new RegExp(`\\d*\\D*houseItself`, `gm`);\r\n                const namesRoomsArrWithRegExp: RegExp[] = namesRoomsArr.map((name: string) => new RegExp(`\\d*\\D*${name}`, `gm`));\r\n\r\n\r\n\r\n                //add images to id\r\n                let id: number = 0;\r\n                selectPicturesForApartmentRegExp.forEach((oldPicture: any) => {\r\n                    ++id;\r\n\r\n                    let picture: string = oldPicture.input;\r\n\r\n                    let pictureWithId: pictureWithIdType = {\r\n                        picture,\r\n                        id,\r\n                    };\r\n                    picturesWithId.push(pictureWithId);\r\n                });\r\n\r\n\r\n\r\n\r\n                const addImagesForHouseItself = () => {\r\n                    picturesWithId.filter((pictureWithId) => {\r\n                        if (pictureWithId.picture.match(pictureHouseItselfRegExp)) {\r\n                            if (!!pictureWithId) {\r\n\r\n                                apartment.picturesHouseItself.push(pictureWithId);\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n                addImagesForHouseItself();\r\n\r\n                const addImagesForApartments = (room: roomType, regExpArr: RegExp[]): void => {\r\n\r\n\r\n                    const regExpSelectedRoom = (uncertainRegExp: RegExp[]): RegExp => {\r\n\r\n\r\n                        let filtredRegExp: RegExp | undefined = uncertainRegExp.find((regExp: RegExp): RegExp | undefined => {\r\n\r\n                            if (!!room.name.match(regExp)) {\r\n                                return regExp;\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n\r\n\r\n                        let returnRegExp = (filtredRegExp: RegExp | undefined) => {\r\n                            let arr1: RegExp[] = []\r\n\r\n\r\n                            if (filtredRegExp != undefined) {\r\n                                let RegExpToReturn: RegExp = Object.assign(filtredRegExp)\r\n                                arr1.push(RegExpToReturn)\r\n                                return RegExpToReturn\r\n                            }\r\n\r\n                            return arr1[0]\r\n                        }\r\n\r\n                        return returnRegExp(filtredRegExp)\r\n\r\n\r\n\r\n\r\n\r\n                    };\r\n\r\n                    //add Images to ArrayImages\r\n                    picturesWithId.map((pictureWithId: pictureWithIdType) => {\r\n                        if (pictureWithId.picture.match(regExpSelectedRoom(regExpArr)) != null) {\r\n                            room.pictures.push(pictureWithId);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                //add images to apartment\r\n                rooms.forEach((room: roomType) => {\r\n                    addImagesForApartments(room, namesRoomsArrWithRegExp);\r\n                });\r\n            };\r\n\r\n            preparationApartmentToExport(pictures);\r\n\r\n            return apartment;\r\n\r\n        })\r\n\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    isIntWork = true;\r\n\r\n    changePictureHouseItself = (): void => {\r\n        const selectedApartment = this.props.apartments[this.props.indexOfSelectedApartment];\r\n\r\n        const picturesHouseItselfLength = selectedApartment.picturesHouseItself.length;\r\n\r\n        clearInterval(this.props.intervalIdForPicture);\r\n        clearInterval(this.props.intervalIdPictureHouseItself);\r\n\r\n\r\n\r\n        let newPosition: number = this.props.positionPictureHouseItself;\r\n\r\n\r\n\r\n\r\n\r\n        if (this.props.indexOfSelectedRoom != null) {\r\n            this.props.setPositionPictureHouseItself(0);\r\n        }\r\n\r\n        const int = setInterval(() => {\r\n\r\n\r\n            this.props.setIntervalIdPictureHouseItself(int);\r\n            this.props.setPositionPictureHouseItself(0);\r\n            newPosition++;\r\n\r\n\r\n\r\n            if (picturesHouseItselfLength - 1 < newPosition) {\r\n\r\n\r\n                newPosition = 0;\r\n                this.props.setPositionPictureHouseItself(0);\r\n            } else {\r\n  \r\n\r\n                this.props.setPositionPictureHouseItself(newPosition);\r\n            }\r\n\r\n            this.props.setPositionPictureHouseItself(newPosition);\r\n        }\r\n\r\n            , 5000);\r\n\r\n        this.props.setIntervalIdPictureHouseItself(int);\r\n\r\n\r\n    };\r\n\r\n    leaveFromFrame = () => {\r\n\r\n\r\n        this.props.setIndexOfSelectedRoom(null);\r\n        this.changePictureHouseItself();\r\n    };\r\n\r\n    chengeIndexOfSelectedApartment = (addOne: boolean) => {\r\n        if (this.props.indexOfSelectedApartment == 0) {\r\n            this.props.setIndexOfSelectedApartment(this.props.apartments.length - 1);\r\n        } else if (this.props.indexOfSelectedApartment == this.props.apartments.length - 1) {\r\n            this.props.setIndexOfSelectedApartment(0);\r\n        } else if (addOne == true) {\r\n            this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment + 1);\r\n        } else if (addOne == false) {\r\n            this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment - 1);\r\n        }\r\n    };\r\n\r\n    handleUpButton = () => {\r\n        window.scrollTo(0, 1000);\r\n    };\r\n\r\n    render() {\r\n\r\n\r\n        const renderImages = () => {\r\n            return (\r\n                <div className=\"apartmentShowcase-overview\" onMouseLeave={() => this.props.setIntervalForPicture(false)}>\r\n                    {this.props.apartments.map((apartment: apartmentType, index: number) => {\r\n                        if (index == this.props.indexOfSelectedApartment) {\r\n                            if (this.props.indexOfSelectedRoom != null) {\r\n                                return (\r\n                                    <>\r\n\r\n\r\n                                        <img\r\n                                            src={apartment.rooms[this.props.indexOfSelectedRoom].pictures[this.props.positionOfPicture].picture}\r\n                                            className=\"apartmentShowcase-overview-image\"\r\n                                        />\r\n                                    </>\r\n\r\n                                );\r\n                            } else {\r\n                                return (\r\n                                    <img\r\n                                        src={apartment.picturesHouseItself[this.props.positionPictureHouseItself].picture}\r\n                                        className=\"apartmentShowcase-overview-image\"\r\n                                    />\r\n\r\n\r\n\r\n\r\n                                );\r\n                            }\r\n                        }\r\n                    })}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        const renderUpbar = () => {\r\n            if (this.props.apartments[this.props.indexOfSelectedApartment] != undefined) {\r\n                return (\r\n                    <>\r\n                        <div className=\"apartmentShowcase-wallpaper\"> \r\n                            <Row onMouseLeave={() => this.leaveFromFrame()}>\r\n                                <Col lg={{ span: 8, offset: 0, order: 2 }} md={{ span: 8, offset: 0, order: 2 }} sm={{ span: 8, offset: 0, order: 2 }} className=\"colWithoutPadding\">\r\n\r\n\r\n                                    <div className=\"apartmentShowcase-frame\">\r\n\r\n\r\n                                        <div className=\"apartmentShowcase-upBar\">\r\n                                            <div className=\"apartmentShow ase-upBar-apartmentName\">\r\n                                                {this.props.apartments[this.props.indexOfSelectedApartment].name}\r\n                                            </div>\r\n                                            <div className=\"apartmentShowcase-upBar-button-back\" onClick={() => this.chengeIndexOfSelectedApartment(false)}>\r\n                                                BACK\r\n                                            </div>\r\n                                            <div className=\"apartmentShowcase-upBar-button-next\" onClick={() => this.chengeIndexOfSelectedApartment(true)}>\r\n                                                NEXT\r\n                                            </div>\r\n                                        </div>\r\n                                        {renderImages()}\r\n                                    </div>\r\n                                </Col>\r\n\r\n                                <Showcase />\r\n\r\n                            </Row>\r\n                        </div>\r\n                    </>\r\n                );\r\n            }\r\n        };\r\n\r\n        return ( \r\n            <>\r\n\r\n                <Row className={\"apartmentShowcase-body\"}>\r\n                    <Col lg={{ span: 10, offset: 1 }} md={{ span: 10, offset: 1 }} sm={{ span: 10, offset: 1 }} >{renderUpbar()}</Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateOrAny) => ({\r\n    indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment,\r\n    indexOfSelectedRoom: state.showcaseStylesAndIndex.indexOfSelectedRoom,\r\n    showCaseApartment: state.apartmentShowCase.showCaseApartment,\r\n    apartments: state.apartmentsArray.apartments,\r\n    isIntervalForPictureWorking: state.showcaseStylesAndIndex.isIntervalForPictureWorking,\r\n    positionOfPicture: state.showcaseStylesAndIndex.positionOfPicture,\r\n    intervalIdPictureHouseItself: state.showcaseStylesAndIndex.intervalIdPictureHouseItself,\r\n    positionPictureHouseItself: state.showcaseStylesAndIndex.positionPictureHouseItself,\r\n    intervalIdForPicture: state.showcaseStylesAndIndex.intervalIdForPicture,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    setIndexOfSelectedApartment: actions.setIndexOfSelectedApartment,\r\n    setApartmentsFromState: actions.setApartmentsFromState,\r\n    setIndexOfSelectedRoom: actions.setIndexOfSelectedRoom,\r\n    changePositionPictureOfRoom: asyncActions.changePositionPictureOfRoom,\r\n    setIntervalForPicture: actions.setIntervalForPicture,\r\n    setIntervalIdPictureHouseItself: actions.setIntervalIdPictureHouseItself,\r\n    setPositionPictureHouseItself: actions.setPositionPictureHouseItself,\r\n})(ApartmentShowcase);\r\n"]},"metadata":{},"sourceType":"module"}
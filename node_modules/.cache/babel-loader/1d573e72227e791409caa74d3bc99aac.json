{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitya\\\\constructor-comp-www\\\\src\\\\apartmentShowcase\\\\apartmentShowcaseMain.tsx\";\nimport axios from 'axios';\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { actions } from '../actions and const/actions';\nimport Showcase from './Showcase';\nimport { asyncActions } from '../actions and const/asyncActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst pictures = importAll(require.context(`../picturesForApartments/picturesForApartment1`, false, /\\.(png|jpe?g|svg)$/));\n\nclass ApartmentShowcase extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.takeResponseAboutApartments = (apartments, pictures) => {\n      let idOfApartment = 0; // preparationApartmentToExport . filter po index\n\n      let preparationApartmentToExport = pictures => {\n        // apartments.map((apartment:apartmentType,indexApartment:number) => {         \n        let indexApartment = 0;\n        let indexApartmentPlusOne = indexApartment + 1;\n        let RegExpForSelectedApartment = new RegExp(`` + indexApartmentPlusOne + `_\\\\D`);\n        const selectPicturesForApartmentRegExp = pictures.map(item => item.default.match(RegExpForSelectedApartment)).filter(item => item != null);\n        const a = pictures.map(item => console.log(item.default));\n        console.log(a);\n        console.log(RegExpForSelectedApartment);\n        console.log(selectPicturesForApartmentRegExp); //})\n\n        idOfApartment++;\n        console.log(pictures); //TODO тут апартмент НАДО ЗАМАПИТЬ\n\n        let filtredApartment = apartments.find(apartment => apartment.id == idOfApartment);\n        const picturesWithId = [];\n        const picturesWithIdForApartment = [];\n        const namesRoomsArr = [];\n        const rooms = filtredApartment.rooms;\n        const picturesHouseItself = filtredApartment.picturesHouseItself; //add all roomNames\n\n        rooms.map(room => {\n          namesRoomsArr.push(room.name);\n        }); //TODO тут надо сделать 1_ и 2_\n        //TODO \n\n        const pictureHouseItselfRegExp = new RegExp(`\\d*\\D*houseItself`, `gm`);\n        const namesRoomsArrWithRegExp = namesRoomsArr.map(name => new RegExp(`\\d*\\D*${name}`, `gm`));\n        console.log(namesRoomsArrWithRegExp); //add images to id\n\n        let id = 0;\n        pictures.forEach(oldPicture => {\n          ++id;\n          let picture = oldPicture.default;\n          let pictureWithId = {\n            picture,\n            id\n          };\n          picturesWithId.push(pictureWithId);\n        });\n        console.log(picturesWithId);\n        console.log(pictures); // let RegExpForSelectedApartment = new RegExp (`/2_\\D/gm`)\n        // const selectPicturesForApartmentRegExp : any = picturesWithId.map((item:any) => item.picture.match(RegExpForSelectedApartment)).filter((item:any) => item != null)\n\n        console.log(selectPicturesForApartmentRegExp);\n\n        const addImagesForHouseItself = () => {\n          picturesWithId.filter(pictureWithId => {\n            if (pictureWithId.picture.match(pictureHouseItselfRegExp)) {\n              if (!!pictureWithId) {\n                filtredApartment.picturesHouseItself.push(pictureWithId);\n              }\n            }\n          });\n        };\n\n        addImagesForHouseItself();\n\n        const addImagesForApartments = (room, regExpArr) => {\n          // Error in return\n          const regExpSelectedRoom = uncertainRegExp => {\n            let filtredRegExp = uncertainRegExp.find(regExp => {\n              if (!!room.name.match(regExp)) {\n                return regExp;\n              }\n            });\n\n            let returnRegExp = filtredRegExp => {\n              let arr1 = [];\n\n              if (filtredRegExp != undefined) {\n                let RegExpToReturn = Object.assign(filtredRegExp);\n                arr1.push(RegExpToReturn);\n                return RegExpToReturn;\n              }\n\n              return arr1[0];\n            };\n\n            return returnRegExp(filtredRegExp);\n          }; //add Images to ArrayImages\n\n\n          picturesWithId.map(pictureWithId => {\n            console.log(regExpSelectedRoom(regExpArr));\n\n            if (pictureWithId.picture.match(regExpSelectedRoom(regExpArr)) != null) {\n              room.pictures.push(pictureWithId);\n            }\n          });\n        }; //add images to apartment\n\n\n        rooms.forEach(room => {\n          addImagesForApartments(room, namesRoomsArrWithRegExp);\n        });\n      };\n\n      preparationApartmentToExport(pictures);\n      console.log(apartments);\n      return apartments;\n    };\n\n    this.changePictureHouseItself = () => {\n      const selectedApartment = this.props.apartments[this.props.indexOfSelectedApartment];\n      const picturesHouseItselfLength = selectedApartment.picturesHouseItself.length;\n      clearInterval(this.props.intervalIdForPicture);\n      clearInterval(this.props.intervalIdPictureHouseItself);\n\n      if (this.props.indexOfSelectedRoom == null) {\n        let newPosition = this.props.positionPictureHouseItself;\n        const int = setInterval(() => {\n          this.props.setIntervalIdPictureHouseItself(int);\n          this.props.setPositionPictureHouseItself(0);\n          newPosition++;\n\n          if (picturesHouseItselfLength - 1 < newPosition) {\n            newPosition = 0;\n            this.props.setPositionPictureHouseItself(0);\n          } else {\n            this.props.setPositionPictureHouseItself(newPosition);\n          }\n\n          this.props.setPositionPictureHouseItself(newPosition);\n        }, 5000);\n        this.props.setIntervalIdPictureHouseItself(int);\n      } else {\n        this.props.setPositionPictureHouseItself(0);\n      }\n    };\n\n    this.leaveFromFrame = () => {\n      this.props.setIndexOfSelectedRoom(null);\n      this.changePictureHouseItself();\n    };\n\n    this.chengeIndexOfSelectedApartment = addOne => {\n      if (this.props.indexOfSelectedApartment == 0) {\n        this.props.setIndexOfSelectedApartment(this.props.apartments.length - 1);\n      } else if (this.props.indexOfSelectedApartment == this.props.apartments.length - 1) {\n        this.props.setIndexOfSelectedApartment(0);\n      } else if (addOne == true) {\n        this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment + 1);\n      } else if (addOne == false) {\n        this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment - 1);\n      }\n    };\n\n    this.handleUpButton = () => {\n      window.scrollTo(0, 1000);\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://my-json-server.typicode.com/GreenScreenRabbit/constructor-comp-server/apartments').then(response => this.props.setApartmentsFromState(this.takeResponseAboutApartments(response.data, pictures)));\n  } // TODO надо переписать для всех apartments\n\n\n  render() {\n    const renderImages = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"apartmentShowcase-overview\",\n        onMouseLeave: () => this.props.setIntervalForPicture(false),\n        children: this.props.apartments.map((apartment, index) => {\n          if (index == this.props.indexOfSelectedApartment) {\n            if (this.props.indexOfSelectedRoom != null) {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: apartment.rooms[this.props.indexOfSelectedRoom].pictures[this.props.positionOfPicture].picture,\n                  className: \"apartmentShowcase-overview-image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"img\", {\n                src: apartment.picturesHouseItself[this.props.positionPictureHouseItself].picture,\n                className: \"apartmentShowcase-overview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 37\n              }, this);\n            }\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this);\n    };\n\n    const renderUpbar = () => {\n      if (this.props.apartments[this.props.indexOfSelectedApartment] != undefined) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"apartmentShowcase-wallpaper\",\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              onMouseLeave: () => this.leaveFromFrame(),\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                lg: {\n                  span: 8,\n                  offset: 0,\n                  order: 2\n                },\n                md: {\n                  span: 8,\n                  offset: 0,\n                  order: 2\n                },\n                className: \"colWithoutPadding\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"apartmentShowcase-frame\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"apartmentShowcase-upBar\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"apartmentShow ase-upBar-apartmentName\",\n                      children: this.props.apartments[this.props.indexOfSelectedApartment].name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"apartmentShowcase-upBar-button-back\",\n                      onClick: () => this.chengeIndexOfSelectedApartment(false),\n                      children: \"BACK\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 320,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"apartmentShowcase-upBar-button-next\",\n                      onClick: () => this.chengeIndexOfSelectedApartment(true),\n                      children: \"NEXT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 41\n                  }, this), renderImages()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Showcase, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 25\n          }, this)\n        }, void 0, false);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"apartmentShowcase-body\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          lg: {\n            span: 10,\n            offset: 1\n          },\n          children: renderUpbar()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment,\n  indexOfSelectedRoom: state.showcaseStylesAndIndex.indexOfSelectedRoom,\n  showCaseApartment: state.apartmentShowCase.showCaseApartment,\n  apartments: state.apartmentsArray.apartments,\n  isIntervalForPictureWorking: state.showcaseStylesAndIndex.isIntervalForPictureWorking,\n  positionOfPicture: state.showcaseStylesAndIndex.positionOfPicture,\n  intervalIdPictureHouseItself: state.showcaseStylesAndIndex.intervalIdPictureHouseItself,\n  positionPictureHouseItself: state.showcaseStylesAndIndex.positionPictureHouseItself,\n  intervalIdForPicture: state.showcaseStylesAndIndex.intervalIdForPicture\n});\n\nexport default connect(mapStateToProps, {\n  setIndexOfSelectedApartment: actions.setIndexOfSelectedApartment,\n  setApartmentsFromState: actions.setApartmentsFromState,\n  setIndexOfSelectedRoom: actions.setIndexOfSelectedRoom,\n  changePositionPictureOfRoom: asyncActions.changePositionPictureOfRoom,\n  setIntervalForPicture: actions.setIntervalForPicture,\n  setIntervalIdPictureHouseItself: actions.setIntervalIdPictureHouseItself,\n  setPositionPictureHouseItself: actions.setPositionPictureHouseItself\n})(ApartmentShowcase);","map":{"version":3,"sources":["C:/Users/Vitya/constructor-comp-www/src/apartmentShowcase/apartmentShowcaseMain.tsx"],"names":["axios","React","Row","Col","connect","actions","Showcase","asyncActions","importAll","r","keys","map","pictures","require","context","ApartmentShowcase","Component","takeResponseAboutApartments","apartments","idOfApartment","preparationApartmentToExport","indexApartment","indexApartmentPlusOne","RegExpForSelectedApartment","RegExp","selectPicturesForApartmentRegExp","item","default","match","filter","a","console","log","filtredApartment","find","apartment","id","picturesWithId","picturesWithIdForApartment","namesRoomsArr","rooms","picturesHouseItself","room","push","name","pictureHouseItselfRegExp","namesRoomsArrWithRegExp","forEach","oldPicture","picture","pictureWithId","addImagesForHouseItself","addImagesForApartments","regExpArr","regExpSelectedRoom","uncertainRegExp","filtredRegExp","regExp","returnRegExp","arr1","undefined","RegExpToReturn","Object","assign","changePictureHouseItself","selectedApartment","props","indexOfSelectedApartment","picturesHouseItselfLength","length","clearInterval","intervalIdForPicture","intervalIdPictureHouseItself","indexOfSelectedRoom","newPosition","positionPictureHouseItself","int","setInterval","setIntervalIdPictureHouseItself","setPositionPictureHouseItself","leaveFromFrame","setIndexOfSelectedRoom","chengeIndexOfSelectedApartment","addOne","setIndexOfSelectedApartment","handleUpButton","window","scrollTo","componentDidMount","get","then","response","setApartmentsFromState","data","render","renderImages","setIntervalForPicture","index","positionOfPicture","renderUpbar","span","offset","order","mapStateToProps","state","apartmentsArray","showcaseStylesAndIndex","showCaseApartment","apartmentShowCase","isIntervalForPictureWorking","changePositionPictureOfRoom"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { Component, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { connect, RootStateOrAny } from 'react-redux';\r\nimport { actions } from '../actions and const/actions';\r\nimport Showcase from './Showcase';\r\nimport img from '../picturesForApartment1/bathroom_1.jpg';\r\nimport { asyncActions } from '../actions and const/asyncActions';\r\nimport { apartmentsType, apartmentType, roomType } from '../apartmentsType/apartmentsType';\r\nimport { oldPictureType, picturesType, picturesWithIdType, pictureType, pictureWithIdType, } from './apartmentShowcaseMainType';\r\n\r\nfunction importAll(r: any) {\r\n    return r.keys().map(r);\r\n}\r\n\r\nconst pictures: picturesType = importAll(require.context(`../picturesForApartments/picturesForApartment1`, false, /\\.(png|jpe?g|svg)$/));\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ApartmentShowcase extends React.Component<any, any> {\r\n    componentDidMount() {\r\n        axios\r\n            .get('https://my-json-server.typicode.com/GreenScreenRabbit/constructor-comp-server/apartments')\r\n            .then((response) => this.props.setApartmentsFromState(this.takeResponseAboutApartments(response.data, pictures)));\r\n    }\r\n\r\n    // TODO надо переписать для всех apartments\r\n    takeResponseAboutApartments = (apartments: apartmentsType, pictures: picturesType) => {\r\n\r\n\r\n        let idOfApartment: number = 0;\r\n\r\n\r\n        // preparationApartmentToExport . filter po index\r\n\r\n\r\n        let preparationApartmentToExport = (pictures: picturesType) => {\r\n\r\n\r\n            // apartments.map((apartment:apartmentType,indexApartment:number) => {         \r\n\r\n                let indexApartment = 0\r\n\r\n                let indexApartmentPlusOne:number = indexApartment + 1 \r\n\r\n                let RegExpForSelectedApartment = new RegExp (``+indexApartmentPlusOne+`_\\\\D`);\r\n\r\n                const selectPicturesForApartmentRegExp : any = pictures.map((item:any) => item.default.match(RegExpForSelectedApartment)).filter((item:any) => item != null)\r\n    \r\n                const a : any = pictures.map((item:any) => console.log(item.default))\r\n\r\n\r\n                console.log(a);\r\n                \r\n\r\n                console.log(RegExpForSelectedApartment);\r\n                \r\n                console.log(selectPicturesForApartmentRegExp);\r\n                \r\n            \r\n\r\n            //})\r\n\r\n\r\n            idOfApartment++;\r\n\r\n            console.log(pictures)\r\n\r\n            //TODO тут апартмент НАДО ЗАМАПИТЬ\r\n\r\n\r\n\r\n            let filtredApartment: any = apartments.find((apartment: apartmentType) => apartment.id == idOfApartment);\r\n \r\n\r\n            const picturesWithId: picturesWithIdType = [];\r\n            const picturesWithIdForApartment: picturesWithIdType = [];\r\n            const namesRoomsArr: string[] = [];\r\n            const rooms = filtredApartment.rooms;\r\n            const picturesHouseItself = filtredApartment.picturesHouseItself;\r\n\r\n            //add all roomNames\r\n            rooms.map((room: roomType) => {\r\n                namesRoomsArr.push(room.name);\r\n            });\r\n\r\n\r\n\r\n\r\n            //TODO тут надо сделать 1_ и 2_\r\n\r\n            //TODO \r\n\r\n            \r\n\r\n\r\n            const pictureHouseItselfRegExp: RegExp = new RegExp(`\\d*\\D*houseItself`, `gm`);\r\n            const namesRoomsArrWithRegExp: RegExp[] = namesRoomsArr.map((name: string) => new RegExp(`\\d*\\D*${name}`, `gm`));\r\n\r\n            console.log(namesRoomsArrWithRegExp);\r\n\r\n\r\n            //add images to id\r\n            let id: number = 0;\r\n            pictures.forEach((oldPicture: oldPictureType) => {\r\n                ++id;\r\n\r\n                let picture: string = oldPicture.default;\r\n\r\n                let pictureWithId: pictureWithIdType = {\r\n                    picture,\r\n                    id,\r\n                };\r\n                picturesWithId.push(pictureWithId);\r\n            });\r\n            \r\n            \r\n            console.log(picturesWithId);\r\n            console.log(pictures);\r\n\r\n            // let RegExpForSelectedApartment = new RegExp (`/2_\\D/gm`)\r\n\r\n            // const selectPicturesForApartmentRegExp : any = picturesWithId.map((item:any) => item.picture.match(RegExpForSelectedApartment)).filter((item:any) => item != null)\r\n\r\n            console.log(selectPicturesForApartmentRegExp);\r\n            \r\n\r\n            \r\n\r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            const addImagesForHouseItself = () => {\r\n                picturesWithId.filter((pictureWithId) => {\r\n                    if (pictureWithId.picture.match(pictureHouseItselfRegExp)) {\r\n                        if (!!pictureWithId) {\r\n\r\n                            filtredApartment.picturesHouseItself.push(pictureWithId);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n            addImagesForHouseItself();\r\n\r\n            const addImagesForApartments = (room: roomType, regExpArr: RegExp[]): void => {\r\n\r\n                // Error in return\r\n                const regExpSelectedRoom = (uncertainRegExp: RegExp[]): RegExp => {\r\n        \r\n\r\n                    let filtredRegExp: RegExp | undefined = uncertainRegExp.find((regExp: RegExp): RegExp | undefined => {\r\n\r\n                        if (!!room.name.match(regExp)) {\r\n                            return regExp;\r\n                        }\r\n\r\n                    });\r\n\r\n\r\n\r\n\r\n                    let returnRegExp = (filtredRegExp: RegExp | undefined) => {\r\n                        let arr1: RegExp[] = []\r\n\r\n\r\n                        if (filtredRegExp != undefined) {\r\n                            let RegExpToReturn: RegExp = Object.assign(filtredRegExp)\r\n                            arr1.push(RegExpToReturn)\r\n                            return RegExpToReturn\r\n                        }\r\n\r\n                        return arr1[0]\r\n                    }\r\n\r\n                    return returnRegExp(filtredRegExp)\r\n\r\n\r\n\r\n\r\n\r\n                };\r\n\r\n                //add Images to ArrayImages\r\n                picturesWithId.map((pictureWithId: pictureWithIdType) => {\r\n                    console.log(regExpSelectedRoom(regExpArr))\r\n                    if (pictureWithId.picture.match(regExpSelectedRoom(regExpArr)) != null) {\r\n                        room.pictures.push(pictureWithId);\r\n                    }\r\n                });\r\n            };\r\n\r\n            //add images to apartment\r\n            rooms.forEach((room: roomType) => {\r\n                addImagesForApartments(room, namesRoomsArrWithRegExp);\r\n            });\r\n        };\r\n\r\n        preparationApartmentToExport(pictures);\r\n\r\n        console.log(apartments);\r\n        \r\n\r\n        return apartments;\r\n    };\r\n\r\n    changePictureHouseItself = (): void => {\r\n        const selectedApartment = this.props.apartments[this.props.indexOfSelectedApartment];\r\n\r\n        const picturesHouseItselfLength = selectedApartment.picturesHouseItself.length;\r\n\r\n        clearInterval(this.props.intervalIdForPicture);\r\n        clearInterval(this.props.intervalIdPictureHouseItself);\r\n\r\n        if (this.props.indexOfSelectedRoom == null) {\r\n            let newPosition: number = this.props.positionPictureHouseItself;\r\n            const int = setInterval(() => {\r\n                this.props.setIntervalIdPictureHouseItself(int);\r\n                this.props.setPositionPictureHouseItself(0);\r\n                newPosition++;\r\n\r\n                if (picturesHouseItselfLength - 1 < newPosition) {\r\n                    newPosition = 0;\r\n                    this.props.setPositionPictureHouseItself(0);\r\n                } else {\r\n                    this.props.setPositionPictureHouseItself(newPosition);\r\n                }\r\n\r\n                this.props.setPositionPictureHouseItself(newPosition);\r\n            }, 5000);\r\n\r\n            this.props.setIntervalIdPictureHouseItself(int);\r\n        } else {\r\n            this.props.setPositionPictureHouseItself(0);\r\n        }\r\n    };\r\n\r\n    leaveFromFrame = () => {\r\n\r\n        this.props.setIndexOfSelectedRoom(null);\r\n        this.changePictureHouseItself();\r\n    };\r\n\r\n    chengeIndexOfSelectedApartment = (addOne: boolean) => {\r\n        if (this.props.indexOfSelectedApartment == 0) {\r\n            this.props.setIndexOfSelectedApartment(this.props.apartments.length - 1);\r\n        } else if (this.props.indexOfSelectedApartment == this.props.apartments.length - 1) {\r\n            this.props.setIndexOfSelectedApartment(0);\r\n        } else if (addOne == true) {\r\n            this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment + 1);\r\n        } else if (addOne == false) {\r\n            this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment - 1);\r\n        }\r\n    };\r\n\r\n    handleUpButton = () => {\r\n        window.scrollTo(0, 1000);\r\n    };\r\n\r\n    render() {\r\n\r\n\r\n        const renderImages = () => {\r\n            return (\r\n                <div className=\"apartmentShowcase-overview\" onMouseLeave={() => this.props.setIntervalForPicture(false)}>\r\n                    {this.props.apartments.map((apartment: apartmentType, index: number) => {\r\n                        if (index == this.props.indexOfSelectedApartment) {\r\n                            if (this.props.indexOfSelectedRoom != null) {\r\n                                return (\r\n                                    <>\r\n\r\n\r\n                                        <img\r\n                                            src={apartment.rooms[this.props.indexOfSelectedRoom].pictures[this.props.positionOfPicture].picture}\r\n                                            className=\"apartmentShowcase-overview-image\"\r\n                                        />\r\n                                    </>\r\n\r\n                                );\r\n                            } else {\r\n                                return (\r\n                                    <img\r\n                                        src={apartment.picturesHouseItself[this.props.positionPictureHouseItself].picture}\r\n                                        className=\"apartmentShowcase-overview-image\"\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    })}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        const renderUpbar = () => {\r\n            if (this.props.apartments[this.props.indexOfSelectedApartment] != undefined) {\r\n                return (\r\n                    <>\r\n                        <div className=\"apartmentShowcase-wallpaper\">\r\n                            <Row onMouseLeave={() => this.leaveFromFrame()}>\r\n                                <Col lg={{ span: 8, offset: 0, order: 2 }} md={{ span: 8, offset: 0, order: 2 }} className=\"colWithoutPadding\">\r\n\r\n\r\n                                    <div className=\"apartmentShowcase-frame\">\r\n\r\n\r\n                                        <div className=\"apartmentShowcase-upBar\">\r\n                                            <div className=\"apartmentShow ase-upBar-apartmentName\">\r\n                                                {this.props.apartments[this.props.indexOfSelectedApartment].name}\r\n                                            </div>\r\n                                            <div className=\"apartmentShowcase-upBar-button-back\" onClick={() => this.chengeIndexOfSelectedApartment(false)}>\r\n                                                BACK\r\n                                            </div>\r\n                                            <div className=\"apartmentShowcase-upBar-button-next\" onClick={() => this.chengeIndexOfSelectedApartment(true)}>\r\n                                                NEXT\r\n                                            </div>\r\n                                        </div>\r\n                                        {renderImages()}\r\n                                    </div>\r\n                                </Col>\r\n\r\n                                <Showcase />\r\n\r\n                            </Row>\r\n                        </div>\r\n                    </>\r\n                );\r\n            }\r\n        };\r\n\r\n        return (\r\n            <>\r\n\r\n                <Row className={\"apartmentShowcase-body\"}>\r\n                    <Col lg={{ span: 10, offset: 1 }}>{renderUpbar()}</Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateOrAny) => ({\r\n    indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment,\r\n    indexOfSelectedRoom: state.showcaseStylesAndIndex.indexOfSelectedRoom,\r\n    showCaseApartment: state.apartmentShowCase.showCaseApartment,\r\n    apartments: state.apartmentsArray.apartments,\r\n    isIntervalForPictureWorking: state.showcaseStylesAndIndex.isIntervalForPictureWorking,\r\n    positionOfPicture: state.showcaseStylesAndIndex.positionOfPicture,\r\n    intervalIdPictureHouseItself: state.showcaseStylesAndIndex.intervalIdPictureHouseItself,\r\n    positionPictureHouseItself: state.showcaseStylesAndIndex.positionPictureHouseItself,\r\n    intervalIdForPicture: state.showcaseStylesAndIndex.intervalIdForPicture,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    setIndexOfSelectedApartment: actions.setIndexOfSelectedApartment,\r\n    setApartmentsFromState: actions.setApartmentsFromState,\r\n    setIndexOfSelectedRoom: actions.setIndexOfSelectedRoom,\r\n    changePositionPictureOfRoom: asyncActions.changePositionPictureOfRoom,\r\n    setIntervalForPicture: actions.setIntervalForPicture,\r\n    setIntervalIdPictureHouseItself: actions.setIntervalIdPictureHouseItself,\r\n    setPositionPictureHouseItself: actions.setPositionPictureHouseItself,\r\n})(ApartmentShowcase);\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitya\\\\constructor-comp-www\\\\src\\\\whatsOutside\\\\WhatsOutside.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Col } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport arrowButtonJpg from './Arrow-button.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WhatsOutside = props => {\n  _s();\n\n  const apartment = props.apartments[props.indexOfSelectedApartment];\n  const [positionOfImg, setPositionOfImg] = useState(0);\n  const [recursiveTimeoutId, setRecursiveTimeoutId] = useState();\n  const [recursiveCheackTimerId, setRecursiveCheackTimerId] = useState();\n  let newPosition = positionOfImg;\n  let isTimerWork = true;\n  let isCheackTimerWork = false;\n  useEffect(() => {\n    apartment ? timer(apartment) : cheackTimer();\n  }, [apartment]);\n\n  function timer(apartment) {\n    let timerId = setTimeout(function run() {\n      setRecursiveTimeoutId(timerId);\n\n      if (isTimerWork == true) {\n        ++newPosition;\n\n        if (apartment.whatsOutside.length - 1 < newPosition) {\n          newPosition = 0;\n          setPositionOfImg(() => 0);\n        } else {\n          setPositionOfImg(() => newPosition);\n        }\n\n        timerId = setTimeout(run, 5000);\n      } else {\n        clearTimeout(recursiveTimeoutId);\n        clearTimeout(timerId);\n      }\n    }, 5000);\n    setRecursiveTimeoutId(timerId);\n  }\n\n  function cheackTimer() {\n    isCheackTimerWork = true;\n    let timerIdCheck = setTimeout(function run() {\n      setRecursiveCheackTimerId(timerIdCheck);\n\n      if (isCheackTimerWork != true) {\n        clearTimeout(timerIdCheck);\n        clearTimeout(recursiveCheackTimerId);\n      } else {\n        timerIdCheck = setTimeout(cheackTimer, 5000);\n      }\n    }, 5000);\n    setRecursiveCheackTimerId(timerIdCheck);\n  }\n\n  const changePositionImgOnClick = isAddOne => {\n    isTimerWork = false;\n\n    const stopRecursiveTimeout = () => {\n      clearTimeout(recursiveTimeoutId);\n    };\n\n    stopRecursiveTimeout();\n    const imgsLength = apartment.whatsOutside.length;\n\n    if (isAddOne == true) {\n      if (positionOfImg >= imgsLength - 1) {\n        setPositionOfImg(0);\n      } else {\n        setPositionOfImg(positionOfImg + 1);\n      }\n    } else {\n      if (positionOfImg - 1 < 0) {\n        setPositionOfImg(imgsLength - 1);\n      } else {\n        setPositionOfImg(positionOfImg - 1);\n      }\n    }\n  };\n\n  const renderImg = () => {\n    const imgs = apartment.whatsOutside;\n    let picUrl = imgs[positionOfImg].url;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"whatsOutside-image\",\n        src: picUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        lg: {\n          offset: 1,\n          span: 10\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"whatsOutside-body\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"whatsOutside-showcase\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"whatsOutside-swipeLeft\",\n              onClick: () => changePositionImgOnClick(false),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: arrowButtonJpg,\n                className: \"whatsOutside-arrowButtonJpg-left\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this), apartment ? renderImg() : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"bad\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 56\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"whatsOutside-swipeRight\",\n              onClick: () => changePositionImgOnClick(true),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: arrowButtonJpg,\n                className: \"whatsOutside-arrowButtonJpg-right\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(WhatsOutside, \"UuT+369WRM9+sX9mkIkqsT07+mo=\");\n\n_c = WhatsOutside;\n\nconst mapStateToProps = state => ({\n  apartments: state.apartmentsArray.apartments,\n  indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment\n});\n\nexport default connect(mapStateToProps, null)(WhatsOutside);\n\nvar _c;\n\n$RefreshReg$(_c, \"WhatsOutside\");","map":{"version":3,"sources":["C:/Users/Vitya/constructor-comp-www/src/whatsOutside/WhatsOutside.tsx"],"names":["useEffect","useState","Col","Row","connect","arrowButtonJpg","WhatsOutside","props","apartment","apartments","indexOfSelectedApartment","positionOfImg","setPositionOfImg","recursiveTimeoutId","setRecursiveTimeoutId","recursiveCheackTimerId","setRecursiveCheackTimerId","newPosition","isTimerWork","isCheackTimerWork","timer","cheackTimer","timerId","setTimeout","run","whatsOutside","length","clearTimeout","timerIdCheck","changePositionImgOnClick","isAddOne","stopRecursiveTimeout","imgsLength","renderImg","imgs","picUrl","url","offset","span","mapStateToProps","state","apartmentsArray"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Col } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\nimport { connect, RootStateOrAny } from 'react-redux';\r\n\r\nimport arrowButtonJpg from './Arrow-button.jpg'\r\n\r\nconst WhatsOutside = (props: any) => {\r\n\r\n\r\n\r\n    const apartment = props.apartments[props.indexOfSelectedApartment];\r\n\r\n    const [positionOfImg, setPositionOfImg] = useState(0);\r\n    const [recursiveTimeoutId, setRecursiveTimeoutId] = useState<any>();\r\n    const [recursiveCheackTimerId, setRecursiveCheackTimerId] = useState<any>();\r\n    \r\n\r\n    let newPosition = positionOfImg;\r\n\r\n    let isTimerWork = true\r\n    let isCheackTimerWork = false\r\n \r\n\r\n\r\n    useEffect(() => {\r\n        apartment ? timer(apartment) : cheackTimer();\r\n    }, [apartment]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function timer(apartment: any) {\r\n\r\n\r\n        let timerId = setTimeout(function run() {\r\n\r\n            setRecursiveTimeoutId(timerId);\r\n\r\n            if (isTimerWork == true) {\r\n\r\n\r\n                ++newPosition;\r\n\r\n\r\n                if (apartment.whatsOutside.length - 1 < newPosition) {\r\n                    newPosition = 0;\r\n                    setPositionOfImg(() => 0);\r\n                } else {\r\n                    setPositionOfImg(() => newPosition);\r\n                }\r\n                timerId = setTimeout(run, 5000);\r\n\r\n            } else {\r\n                clearTimeout(recursiveTimeoutId)\r\n                clearTimeout(timerId)\r\n            }\r\n        }, 5000);\r\n\r\n\r\n\r\n        setRecursiveTimeoutId(timerId)\r\n\r\n    }\r\n\r\n\r\n    function cheackTimer() {\r\n\r\n\r\n        isCheackTimerWork = true\r\n\r\n        let timerIdCheck = setTimeout(function run() {\r\n            setRecursiveCheackTimerId(timerIdCheck);\r\n\r\n\r\n            if (isCheackTimerWork != true) {\r\n\r\n\r\n                clearTimeout(timerIdCheck);\r\n                clearTimeout(recursiveCheackTimerId);\r\n            } else {\r\n                timerIdCheck = setTimeout(cheackTimer, 5000);\r\n            }\r\n        }, 5000);\r\n        setRecursiveCheackTimerId(timerIdCheck);\r\n    }\r\n\r\n\r\n\r\n\r\n    const changePositionImgOnClick = (isAddOne: boolean) => {\r\n\r\n\r\n        isTimerWork = false\r\n\r\n        const stopRecursiveTimeout = () => {\r\n            clearTimeout(recursiveTimeoutId)\r\n\r\n        };\r\n        stopRecursiveTimeout();\r\n\r\n\r\n\r\n        const imgsLength = apartment.whatsOutside.length\r\n\r\n\r\n\r\n        if (isAddOne == true) {\r\n\r\n            if (positionOfImg >= imgsLength - 1) {\r\n                setPositionOfImg(0)\r\n            } else {\r\n                setPositionOfImg(positionOfImg + 1)\r\n            }\r\n\r\n\r\n        } else {\r\n\r\n\r\n            if (positionOfImg - 1 < 0) {\r\n                setPositionOfImg(imgsLength - 1)\r\n            } else {\r\n                setPositionOfImg(positionOfImg - 1)\r\n            }\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    const renderImg = () => {\r\n        const imgs = apartment.whatsOutside;\r\n        let picUrl = imgs[positionOfImg].url;\r\n\r\n        return (\r\n            <>\r\n                <img className=\"whatsOutside-image\" src={picUrl} />\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col lg={{ offset: 1, span: 10 }}>\r\n                    <div className=\"whatsOutside-body\">\r\n                        <div className=\"whatsOutside-showcase\">\r\n                            <div className=\"whatsOutside-swipeLeft\" onClick={() => changePositionImgOnClick(false)}>\r\n                                <img src={arrowButtonJpg} className=\"whatsOutside-arrowButtonJpg-left\" />\r\n\r\n                            </div>\r\n                            {apartment ? renderImg() : <div>bad</div>}\r\n                            <div className=\"whatsOutside-swipeRight\" onClick={() => changePositionImgOnClick(true)}>\r\n                                <img src={arrowButtonJpg} className=\"whatsOutside-arrowButtonJpg-right\" />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateOrAny) => ({\r\n    apartments: state.apartmentsArray.apartments,\r\n    indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(WhatsOutside);\r\n"]},"metadata":{},"sourceType":"module"}
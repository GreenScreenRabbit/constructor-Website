{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vitya\\\\constructor-comp-www\\\\src\\\\apartmentShowcase\\\\apartmentShowcaseMain.tsx\";\nimport axios from 'axios';\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { actions } from '../actions and const/actions';\nimport Showcase from './Showcase';\nimport { asyncActions } from '../actions and const/asyncActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction importAll(r) {\n  return r.keys().map(r);\n}\n\nconst pictures = importAll(require.context(`../picturesForApartments/picturesForApartment1`, false, /\\.(png|jpe?g|svg)$/));\n\nconst f1 = function () {\n  let counter = 0;\n  return function () {\n    return ++counter;\n  };\n}();\n\nf1();\nf1();\nf1();\n\nclass ApartmentShowcase extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.takeResponseAboutApartments = (apartments, pictures) => {\n      let idOfApartment = 0;\n\n      let preparationApartmentToExport = pictures => {\n        idOfApartment++;\n        let filtredApartment = apartments.find(apartment => apartment.id == idOfApartment);\n        const picturesWithId = [];\n        const namesRoomsArr = [];\n        const rooms = filtredApartment.rooms;\n        const picturesHouseItself = filtredApartment.picturesHouseItself;\n        console.log(picturesHouseItself);\n        console.log(rooms); //add all roomNames\n\n        rooms.map(room => {\n          namesRoomsArr.push(room.name);\n        });\n        const pictureHouseItselfRegExp = new RegExp(`\\d*\\D*houseItself`, `gm`);\n        const namesRoomsArrWithRegExp = namesRoomsArr.map(name => new RegExp(`\\d*\\D*${name}`, `gm`));\n        console.log(`pictureHouseItselfRegExp = ${pictureHouseItselfRegExp}`); //add images to id\n\n        let id = 0;\n        pictures.forEach(picture => {\n          console.log(picture);\n          ++id;\n          picture = picture.default;\n          let pictureWithId = {\n            picture,\n            id\n          };\n          picturesWithId.push(pictureWithId);\n          console.log(picturesWithId);\n        });\n\n        const addImagesForHouseItself = () => {\n          picturesWithId.filter(pictureWithId => {\n            if (pictureWithId.picture.match(pictureHouseItselfRegExp)) {\n              if (!!pictureWithId) {\n                console.log(pictureWithId);\n                filtredApartment.picturesHouseItself.push(pictureWithId);\n              }\n            }\n          });\n        };\n\n        addImagesForHouseItself();\n\n        const addImagesForApartments = (room, regExpArr) => {\n          console.log(room);\n          console.log(regExpArr);\n\n          const regExpSelectedRoom = uncertainRegExp => {\n            return uncertainRegExp.find(regExp => {\n              if (!!room.name.match(regExp)) {\n                return regExp;\n              }\n            });\n          }; //add Images to ArrayImages\n\n\n          picturesWithId.map(pictureWithId => {\n            if (pictureWithId.picture.match(regExpSelectedRoom(regExpArr)) != null) {\n              room.pictures.push(pictureWithId);\n            }\n          });\n        }; //add images to apartment\n\n\n        rooms.forEach(room => {\n          addImagesForApartments(room, namesRoomsArrWithRegExp);\n        });\n      };\n\n      preparationApartmentToExport(pictures);\n      return apartments;\n    };\n\n    this.changePictureHouseItself = () => {\n      const selectedApartment = this.props.apartments[this.props.indexOfSelectedApartment];\n      const picturesHouseItselfLength = selectedApartment.picturesHouseItself.length;\n      clearInterval(this.props.intervalIdForPicture);\n      clearInterval(this.props.intervalIdPictureHouseItself);\n\n      if (this.props.indexOfSelectedRoom == null) {\n        let newPosition = this.props.positionPictureHouseItself;\n        const int = setInterval(() => {\n          this.props.setIntervalIdPictureHouseItself(int);\n          this.props.setPositionPictureHouseItself(0);\n          newPosition++;\n          console.log(newPosition);\n          console.log(picturesHouseItselfLength - 1);\n\n          if (picturesHouseItselfLength - 1 < newPosition) {\n            newPosition = 0;\n            this.props.setPositionPictureHouseItself(0);\n          } else {\n            // newPosition = 0\n            this.props.setPositionPictureHouseItself(newPosition);\n          }\n\n          this.props.setPositionPictureHouseItself(newPosition);\n        }, 5000);\n        this.props.setIntervalIdPictureHouseItself(int);\n      } else {\n        console.log('UNnull');\n        this.props.setPositionPictureHouseItself(0);\n      }\n    };\n\n    this.leaveFromFrame = () => {\n      this.props.setIndexOfSelectedRoom(null);\n      this.changePictureHouseItself();\n    };\n\n    this.chengeIndexOfSelectedApartment = addOne => {\n      if (this.props.indexOfSelectedApartment == 0) {\n        this.props.setIndexOfSelectedApartment(this.props.apartments.length - 1);\n      } else if (this.props.indexOfSelectedApartment == this.props.apartments.length - 1) {\n        this.props.setIndexOfSelectedApartment(0);\n      } else if (addOne == true) {\n        this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment + 1);\n      } else if (addOne == false) {\n        this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment - 1);\n      }\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://my-json-server.typicode.com/GreenScreenRabbit/constructor-comp-server/apartments').then(response => this.props.setApartmentsFromState(this.takeResponseAboutApartments(response.data, pictures)));\n  } // TODO надо переписать для всех apartments\n\n\n  render() {\n    console.log('render');\n\n    const renderImages = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"apartmentShowcase-overview\",\n        onMouseLeave: () => this.props.setIntervalForPicture(false),\n        children: [this.props.apartments.map((apartment, index) => {\n          if (index == this.props.indexOfSelectedApartment) {\n            if (this.props.indexOfSelectedRoom != null) {\n              return /*#__PURE__*/_jsxDEV(\"img\", {\n                src: apartment.rooms[this.props.indexOfSelectedRoom].pictures[this.props.positionOfPicture].picture,\n                className: \"apartmentShowcase-overview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 37\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"img\", {\n                src: apartment.picturesHouseItself[this.props.positionPictureHouseItself].picture,\n                className: \"apartmentShowcase-overview-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 37\n              }, this);\n            }\n          }\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Showcase, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this);\n    };\n\n    const renderUpbar = () => {\n      if (this.props.apartments[this.props.indexOfSelectedApartment] != undefined) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"apartmentShowcase-frame\",\n            onMouseLeave: () => this.leaveFromFrame(),\n            children: [\"22222\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"apartmentShowcase-upBar\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"apartmentShow ase-upBar-apartmentName\",\n                children: this.props.apartments[this.props.indexOfSelectedApartment].name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"apartmentShowcase-upBar-button-back\",\n                onClick: () => this.chengeIndexOfSelectedApartment(false),\n                children: \"BACK\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"apartmentShowcase-upBar-button-next\",\n                onClick: () => this.chengeIndexOfSelectedApartment(true),\n                children: \"NEXT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 29\n            }, this), renderImages()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this)\n        }, void 0, false);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          lg: {\n            span: 10,\n            offset: 1\n          },\n          children: renderUpbar()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment,\n  indexOfSelectedRoom: state.showcaseStylesAndIndex.indexOfSelectedRoom,\n  showCaseApartment: state.apartmentShowCase.showCaseApartment,\n  apartments: state.apartmentsArray.apartments,\n  isIntervalForPictureWorking: state.showcaseStylesAndIndex.isIntervalForPictureWorking,\n  positionOfPicture: state.showcaseStylesAndIndex.positionOfPicture,\n  intervalIdPictureHouseItself: state.showcaseStylesAndIndex.intervalIdPictureHouseItself,\n  positionPictureHouseItself: state.showcaseStylesAndIndex.positionPictureHouseItself,\n  intervalIdForPicture: state.showcaseStylesAndIndex.intervalIdForPicture\n});\n\nexport default connect(mapStateToProps, {\n  setIndexOfSelectedApartment: actions.setIndexOfSelectedApartment,\n  setApartmentsFromState: actions.setApartmentsFromState,\n  setIndexOfSelectedRoom: actions.setIndexOfSelectedRoom,\n  changePositionPictureOfRoom: asyncActions.changePositionPictureOfRoom,\n  setIntervalForPicture: actions.setIntervalForPicture,\n  setIntervalIdPictureHouseItself: actions.setIntervalIdPictureHouseItself,\n  setPositionPictureHouseItself: actions.setPositionPictureHouseItself\n})(ApartmentShowcase);","map":{"version":3,"sources":["C:/Users/Vitya/constructor-comp-www/src/apartmentShowcase/apartmentShowcaseMain.tsx"],"names":["axios","React","Row","Col","connect","actions","Showcase","asyncActions","importAll","r","keys","map","pictures","require","context","f1","counter","ApartmentShowcase","Component","takeResponseAboutApartments","apartments","idOfApartment","preparationApartmentToExport","filtredApartment","find","apartment","id","picturesWithId","namesRoomsArr","rooms","picturesHouseItself","console","log","room","push","name","pictureHouseItselfRegExp","RegExp","namesRoomsArrWithRegExp","forEach","picture","default","pictureWithId","addImagesForHouseItself","filter","match","addImagesForApartments","regExpArr","regExpSelectedRoom","uncertainRegExp","regExp","changePictureHouseItself","selectedApartment","props","indexOfSelectedApartment","picturesHouseItselfLength","length","clearInterval","intervalIdForPicture","intervalIdPictureHouseItself","indexOfSelectedRoom","newPosition","positionPictureHouseItself","int","setInterval","setIntervalIdPictureHouseItself","setPositionPictureHouseItself","leaveFromFrame","setIndexOfSelectedRoom","chengeIndexOfSelectedApartment","addOne","setIndexOfSelectedApartment","componentDidMount","get","then","response","setApartmentsFromState","data","render","renderImages","setIntervalForPicture","index","positionOfPicture","renderUpbar","undefined","span","offset","mapStateToProps","state","apartmentsArray","showcaseStylesAndIndex","showCaseApartment","apartmentShowCase","isIntervalForPictureWorking","changePositionPictureOfRoom"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { Component, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { connect, RootStateOrAny } from 'react-redux';\r\nimport { actions } from '../actions and const/actions';\r\nimport Showcase from './Showcase';\r\nimport img from '../picturesForApartment1/bathroom_1.jpg';\r\nimport { asyncActions } from '../actions and const/asyncActions';\r\n\r\nfunction importAll(r: any) {\r\n    return r.keys().map(r);\r\n}\r\n\r\nconst pictures = importAll(require.context(`../picturesForApartments/picturesForApartment1`, false, /\\.(png|jpe?g|svg)$/));\r\n\r\nconst f1 = (function () {\r\n    let counter = 0;\r\n    return function () {\r\n        return ++counter;\r\n    };\r\n})();\r\n\r\nf1();\r\nf1();\r\nf1();\r\n\r\nclass ApartmentShowcase extends React.Component<any, any> {\r\n    componentDidMount() {\r\n        axios\r\n            .get('https://my-json-server.typicode.com/GreenScreenRabbit/constructor-comp-server/apartments')\r\n            .then((response) => this.props.setApartmentsFromState(this.takeResponseAboutApartments(response.data, pictures)));\r\n    }\r\n\r\n    // TODO надо переписать для всех apartments\r\n    takeResponseAboutApartments = (apartments: any, pictures: any) => {\r\n        let idOfApartment: number = 0;\r\n\r\n        let preparationApartmentToExport = (pictures: any) => {\r\n            idOfApartment++;\r\n\r\n            let filtredApartment = apartments.find((apartment: any) => apartment.id == idOfApartment);\r\n\r\n            const picturesWithId: any[] = [];\r\n            const namesRoomsArr: string[] = [];\r\n            const rooms = filtredApartment.rooms;\r\n            const picturesHouseItself = filtredApartment.picturesHouseItself;\r\n\r\n            console.log(picturesHouseItself);\r\n\r\n            console.log(rooms);\r\n\r\n            //add all roomNames\r\n            rooms.map((room: any) => {\r\n                namesRoomsArr.push(room.name);\r\n            });\r\n\r\n            const pictureHouseItselfRegExp = new RegExp(`\\d*\\D*houseItself`, `gm`);\r\n            const namesRoomsArrWithRegExp = namesRoomsArr.map((name: string) => new RegExp(`\\d*\\D*${name}`, `gm`));\r\n\r\n            console.log(`pictureHouseItselfRegExp = ${pictureHouseItselfRegExp}`);\r\n\r\n            //add images to id\r\n            let id: number = 0;\r\n            pictures.forEach((picture: any) => {\r\n                console.log(picture);\r\n                ++id;\r\n\r\n                picture = picture.default;\r\n\r\n                let pictureWithId = {\r\n                    picture,\r\n                    id,\r\n                };\r\n                picturesWithId.push(pictureWithId);\r\n                console.log(picturesWithId);\r\n            });\r\n\r\n            const addImagesForHouseItself = () => {\r\n                picturesWithId.filter((pictureWithId) => {\r\n                    if (pictureWithId.picture.match(pictureHouseItselfRegExp)) {\r\n                        if (!!pictureWithId) {\r\n                            console.log(pictureWithId);\r\n\r\n                            filtredApartment.picturesHouseItself.push(pictureWithId);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n            addImagesForHouseItself();\r\n\r\n            const addImagesForApartments = (room: any, regExpArr: any): void => {\r\n                console.log(room);\r\n\r\n                console.log(regExpArr);\r\n\r\n                const regExpSelectedRoom = (uncertainRegExp: any) => {\r\n                    return uncertainRegExp.find((regExp: any) => {\r\n                        if (!!room.name.match(regExp)) {\r\n                            return regExp;\r\n                        }\r\n                    });\r\n                };\r\n\r\n                //add Images to ArrayImages\r\n                picturesWithId.map((pictureWithId: any) => {\r\n                    if (pictureWithId.picture.match(regExpSelectedRoom(regExpArr)) != null) {\r\n                        room.pictures.push(pictureWithId);\r\n                    }\r\n                });\r\n            };\r\n\r\n            //add images to apartment\r\n            rooms.forEach((room: any) => {\r\n                addImagesForApartments(room, namesRoomsArrWithRegExp);\r\n            });\r\n        };\r\n\r\n        preparationApartmentToExport(pictures);\r\n\r\n        return apartments;\r\n    };\r\n\r\n    changePictureHouseItself = (): void => {\r\n\r\n        const selectedApartment = this.props.apartments[this.props.indexOfSelectedApartment];\r\n\r\n        const picturesHouseItselfLength = selectedApartment.picturesHouseItself.length;\r\n\r\n\r\n\r\n\r\n        clearInterval(this.props.intervalIdForPicture);\r\n        clearInterval(this.props.intervalIdPictureHouseItself);\r\n\r\n        if (this.props.indexOfSelectedRoom == null) {\r\n            let newPosition: number = this.props.positionPictureHouseItself;\r\n            const int = setInterval(() => {\r\n                this.props.setIntervalIdPictureHouseItself(int);\r\n                this.props.setPositionPictureHouseItself(0)\r\n                newPosition++;\r\n\r\n\r\n                \r\n                console.log(newPosition);\r\n                \r\n                console.log(picturesHouseItselfLength - 1);\r\n                \r\n\r\n                if (picturesHouseItselfLength - 1 < newPosition) {\r\n                    newPosition = 0;\r\n                    this.props.setPositionPictureHouseItself(0);\r\n                } else {\r\n                    // newPosition = 0\r\n                    this.props.setPositionPictureHouseItself(newPosition);\r\n                    \r\n                }\r\n\r\n                this.props.setPositionPictureHouseItself(newPosition);\r\n            }, 5000);\r\n            \r\n            \r\n            this.props.setIntervalIdPictureHouseItself(int);\r\n        } else {\r\n            console.log('UNnull');\r\n            this.props.setPositionPictureHouseItself(0);\r\n        }\r\n    };\r\n\r\n    leaveFromFrame = () => {\r\n        this.props.setIndexOfSelectedRoom(null);\r\n        this.changePictureHouseItself(); \r\n    };\r\n\r\n\r\n\r\n    chengeIndexOfSelectedApartment = (addOne: boolean) => {\r\n        if (this.props.indexOfSelectedApartment == 0) {\r\n            this.props.setIndexOfSelectedApartment(this.props.apartments.length - 1);\r\n        } else if (this.props.indexOfSelectedApartment == this.props.apartments.length - 1) {\r\n            this.props.setIndexOfSelectedApartment(0);\r\n        } else if (addOne == true) {\r\n            this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment + 1);\r\n        } else if (addOne == false) {\r\n            this.props.setIndexOfSelectedApartment(this.props.indexOfSelectedApartment - 1);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        console.log('render');\r\n\r\n        const renderImages = () => {\r\n            return (\r\n                <div className=\"apartmentShowcase-overview\" onMouseLeave={() => this.props.setIntervalForPicture(false)}>\r\n                    \r\n                    {this.props.apartments.map((apartment: any, index: number) => {\r\n                        if (index == this.props.indexOfSelectedApartment) {\r\n                            if (this.props.indexOfSelectedRoom != null) {\r\n                                return (\r\n                                    <img\r\n                                        src={apartment.rooms[this.props.indexOfSelectedRoom].pictures[this.props.positionOfPicture].picture}\r\n                                        className=\"apartmentShowcase-overview-image\"\r\n                                    />\r\n                                );\r\n                            } else {\r\n                                return (\r\n                                    <img\r\n                                        src={apartment.picturesHouseItself[this.props.positionPictureHouseItself].picture}\r\n                                        className=\"apartmentShowcase-overview-image\"\r\n                                    />\r\n                                );\r\n                            }\r\n                        }\r\n                    })}\r\n\r\n                    \r\n                    <div>\r\n                        <Showcase />\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n\r\n\r\n\r\n        const renderUpbar = () => {\r\n            if (this.props.apartments[this.props.indexOfSelectedApartment] != undefined) {\r\n                return (\r\n                    <>\r\n                        <div className=\"apartmentShowcase-frame\" onMouseLeave={() => this.leaveFromFrame()}>\r\n                            22222\r\n                            <div className=\"apartmentShowcase-upBar\">\r\n                                <div className=\"apartmentShow ase-upBar-apartmentName\">{this.props.apartments[this.props.indexOfSelectedApartment].name}</div>\r\n                                <div className=\"apartmentShowcase-upBar-button-back\" onClick={() => this.chengeIndexOfSelectedApartment(false)}>\r\n                                    BACK\r\n                                </div>\r\n                                <div className=\"apartmentShowcase-upBar-button-next\" onClick={() => this.chengeIndexOfSelectedApartment(true)}>\r\n                                    NEXT\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            {renderImages()}\r\n                            \r\n                        </div>\r\n                    </>\r\n                );\r\n            }\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col lg={{ span: 10, offset: 1 }} >{renderUpbar()}</Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateOrAny) => ({\r\n    indexOfSelectedApartment: state.apartmentsArray.indexOfSelectedApartment,\r\n    indexOfSelectedRoom: state.showcaseStylesAndIndex.indexOfSelectedRoom,\r\n    showCaseApartment: state.apartmentShowCase.showCaseApartment,\r\n    apartments: state.apartmentsArray.apartments,\r\n    isIntervalForPictureWorking: state.showcaseStylesAndIndex.isIntervalForPictureWorking,\r\n    positionOfPicture: state.showcaseStylesAndIndex.positionOfPicture,\r\n    intervalIdPictureHouseItself: state.showcaseStylesAndIndex.intervalIdPictureHouseItself,\r\n    positionPictureHouseItself: state.showcaseStylesAndIndex.positionPictureHouseItself,\r\n    intervalIdForPicture: state.showcaseStylesAndIndex.intervalIdForPicture,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    setIndexOfSelectedApartment: actions.setIndexOfSelectedApartment,\r\n    setApartmentsFromState: actions.setApartmentsFromState,\r\n    setIndexOfSelectedRoom: actions.setIndexOfSelectedRoom,\r\n    changePositionPictureOfRoom: asyncActions.changePositionPictureOfRoom,\r\n    setIntervalForPicture: actions.setIntervalForPicture,\r\n    setIntervalIdPictureHouseItself: actions.setIntervalIdPictureHouseItself,\r\n    setPositionPictureHouseItself: actions.setPositionPictureHouseItself,\r\n})(ApartmentShowcase);\r\n"]},"metadata":{},"sourceType":"module"}